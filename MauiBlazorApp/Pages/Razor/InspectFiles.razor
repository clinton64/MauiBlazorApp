@page "/inspection"
@using MauiBlazorApp.Data;
@using MauiBlazorApp.Model.ViewModels;
@using Microsoft.AspNetCore.Authorization;
@implements IDisposable
@inject IJSRuntime JS
@inject DataService service
@attribute [Authorize]

<h2>Inspection Files</h2>
<p>List of Inspection Files</p>
<div class="row">
    @if (!internetConnection)
    {
        <div class="col-10 alert alert-danger">
            <p> You are Offline.Please Check your Connectivity !! </p>
        </div>
    }
    <div class="col-2 align-self-end">
        <button class="btn btn-primary mb-2" type="button" @onclick="RefreshButtonClick">Refresh</button>
    </div>
</div>

@if(Inspections == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="display nowrap" id="frcm_table">
        <thead>
            <tr>
                <th>caseID</th>
                <th>caseNo</th>
                <th>projectNo</th>
                <th>plotNo</th>
                <th>fullName</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inspection in Inspections)
            {
                <tr>
                    <td>@inspection.caseID</td>
                    <td>@inspection.caseNo</td>
                    <td>@inspection.projectNo</td>
                    <td>@inspection.plotNo</td>
                    <td>@inspection.fullName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    List<InspectionResponseModel> Inspections { get; set; }
    private bool internetConnection { get; set; } 
    protected override async void OnInitialized()
    {
        await RefreshData();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(Inspections != null)
        {
            if (firstRender)
            {
                await JS.InvokeVoidAsync("window.DataTables1.buildDataTable");
            }
            else
            {
                await JS.InvokeVoidAsync("window.DataTables1.destroyDataTable");
                await JS.InvokeVoidAsync("window.DataTables1.buildDataTable");
            }
            
        }
    }
    public async void Dispose()
    {
        await JS.InvokeVoidAsync("window.DataTables1.destroyDataTable");
    }
    private async Task RefreshData()
    {
        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            internetConnection = false;
        }
        else
        {
            internetConnection = true;      
        }
        Inspections = await service.GetData();

    }
    private void RefreshButtonClick()
    {
        _ = RefreshData();
    }
}